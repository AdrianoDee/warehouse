import FWCore.ParameterSet.Config as cms

trackValidatorHIonPixelTrackingOnly = cms.EDProducer("MultiTrackValidator",
    UseAssociators = cms.bool(False),
    associators = cms.untracked.VInputTag("trackingParticlePixelTrackAsssociationHIon"),
    beamSpot = cms.InputTag("offlineBeamSpot"),
    calculateDrSingleCollection = cms.untracked.bool(True),
    chargedOnlyTP = cms.bool(True),
    cores = cms.InputTag(""),
    dEdx1Tag = cms.InputTag("dedxHarmonic2"),
    dEdx2Tag = cms.InputTag("dedxTruncated40"),
    dirName = cms.string('Tracking/PixelTrack/'),
    doMVAPlots = cms.untracked.bool(False),
    doPVAssociationPlots = cms.untracked.bool(False),
    doPlotsOnlyForTruePV = cms.untracked.bool(False),
    doRecoTrackPlots = cms.untracked.bool(True),
    doResolutionPlotsForLabels = cms.VInputTag(),
    doSeedPlots = cms.untracked.bool(False),
    doSimPlots = cms.untracked.bool(True),
    doSimTrackPlots = cms.untracked.bool(True),
    doSummaryPlots = cms.untracked.bool(True),
    dodEdxPlots = cms.untracked.bool(False),
    histoProducerAlgoBlock = cms.PSet(
        GpSelectorForEfficiencyVsEta = cms.PSet(
            chargedOnly = cms.bool(True),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(3),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-3),
            pdgId = cms.vint32(),
            ptMin = cms.double(0.9),
            status = cms.int32(1),
            tip = cms.double(2.5)
        ),
        GpSelectorForEfficiencyVsPhi = cms.PSet(
            chargedOnly = cms.bool(True),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(3),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-3),
            pdgId = cms.vint32(),
            ptMin = cms.double(0.9),
            status = cms.int32(1),
            tip = cms.double(2.5)
        ),
        GpSelectorForEfficiencyVsPt = cms.PSet(
            chargedOnly = cms.bool(True),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(3),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-3),
            pdgId = cms.vint32(),
            ptMin = cms.double(0.05),
            status = cms.int32(1),
            tip = cms.double(2.5)
        ),
        GpSelectorForEfficiencyVsVTXR = cms.PSet(
            chargedOnly = cms.bool(True),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(3),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-3),
            pdgId = cms.vint32(),
            ptMin = cms.double(0.9),
            status = cms.int32(1),
            tip = cms.double(2.5)
        ),
        GpSelectorForEfficiencyVsVTXZ = cms.PSet(
            chargedOnly = cms.bool(True),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(35.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(3),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-3),
            pdgId = cms.vint32(),
            ptMin = cms.double(0.9),
            status = cms.int32(1),
            tip = cms.double(2.5)
        ),
        TpSelectorForEfficiencyVsEta = cms.PSet(
            chargedOnly = cms.bool(True),
            intimeOnly = cms.bool(False),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(3),
            minHit = cms.int32(0),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-3),
            pdgId = cms.vint32(),
            ptMax = cms.double(1e+100),
            ptMin = cms.double(0.9),
            signalOnly = cms.bool(True),
            stableOnly = cms.bool(False),
            tip = cms.double(2.5)
        ),
        TpSelectorForEfficiencyVsPhi = cms.PSet(
            chargedOnly = cms.bool(True),
            intimeOnly = cms.bool(False),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(2.5),
            minHit = cms.int32(0),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-2.5),
            pdgId = cms.vint32(),
            ptMax = cms.double(1e+100),
            ptMin = cms.double(0.9),
            signalOnly = cms.bool(True),
            stableOnly = cms.bool(False),
            tip = cms.double(3.5)
        ),
        TpSelectorForEfficiencyVsPt = cms.PSet(
            chargedOnly = cms.bool(True),
            intimeOnly = cms.bool(False),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(2.5),
            minHit = cms.int32(0),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-2.5),
            pdgId = cms.vint32(),
            ptMax = cms.double(1e+100),
            ptMin = cms.double(0.05),
            signalOnly = cms.bool(True),
            stableOnly = cms.bool(False),
            tip = cms.double(3.5)
        ),
        TpSelectorForEfficiencyVsVTXR = cms.PSet(
            chargedOnly = cms.bool(True),
            intimeOnly = cms.bool(False),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(2.5),
            minHit = cms.int32(0),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-2.5),
            pdgId = cms.vint32(),
            ptMax = cms.double(1e+100),
            ptMin = cms.double(0.9),
            signalOnly = cms.bool(True),
            stableOnly = cms.bool(False),
            tip = cms.double(60.0)
        ),
        TpSelectorForEfficiencyVsVTXZ = cms.PSet(
            chargedOnly = cms.bool(True),
            intimeOnly = cms.bool(False),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(2.5),
            minHit = cms.int32(0),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-2.5),
            pdgId = cms.vint32(),
            ptMax = cms.double(1e+100),
            ptMin = cms.double(0.9),
            signalOnly = cms.bool(True),
            stableOnly = cms.bool(False),
            tip = cms.double(3.5)
        ),
        cotThetaRes_nbin = cms.int32(300),
        cotThetaRes_rangeMax = cms.double(0.02),
        cotThetaRes_rangeMin = cms.double(-0.02),
        doDzPVcutPlots = cms.untracked.bool(True),
        doMTDPlots = cms.untracked.bool(False),
        dxyDzZoom = cms.double(25),
        dxyRes_nbin = cms.int32(500),
        dxyRes_rangeMax = cms.double(0.1),
        dxyRes_rangeMin = cms.double(-0.1),
        dzRes_nbin = cms.int32(150),
        dzRes_rangeMax = cms.double(0.05),
        dzRes_rangeMin = cms.double(-0.05),
        generalGpSelector = cms.PSet(
            chargedOnly = cms.bool(True),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(3),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-3),
            pdgId = cms.vint32(),
            ptMin = cms.double(0.9),
            status = cms.int32(1),
            tip = cms.double(2.5)
        ),
        generalTpSelector = cms.PSet(
            chargedOnly = cms.bool(True),
            intimeOnly = cms.bool(False),
            invertRapidityCut = cms.bool(False),
            lip = cms.double(30.0),
            maxPhi = cms.double(3.2),
            maxRapidity = cms.double(3),
            minHit = cms.int32(0),
            minPhi = cms.double(-3.2),
            minRapidity = cms.double(-3),
            pdgId = cms.vint32(),
            ptMax = cms.double(1e+100),
            ptMin = cms.double(0.9),
            signalOnly = cms.bool(True),
            stableOnly = cms.bool(False),
            tip = cms.double(2.5)
        ),
        maxChi2 = cms.double(20),
        maxDeDx = cms.double(10.0),
        maxDxy = cms.double(25),
        maxDz = cms.double(30),
        maxDzpvCumulative = cms.double(0.6),
        maxDzpvsigCumulative = cms.double(10),
        maxEta = cms.double(3),
        maxHit = cms.double(80.5),
        maxLayers = cms.double(25.5),
        maxMVA = cms.double(1),
        maxPVz = cms.double(60),
        maxPhi = cms.double(3.1416),
        maxPt = cms.double(1000),
        maxPu = cms.double(259.5),
        maxTracks = cms.double(2000),
        maxVertcount = cms.double(160.5),
        maxVertpos = cms.double(100),
        maxZpos = cms.double(30),
        maxdr = cms.double(1),
        maxdrj = cms.double(0.5),
        minChi2 = cms.double(0),
        minDeDx = cms.double(0.0),
        minDxy = cms.double(-25),
        minDz = cms.double(-30),
        minEta = cms.double(-3),
        minHit = cms.double(-0.5),
        minLayers = cms.double(-0.5),
        minMVA = cms.double(-1),
        minPVz = cms.double(-60),
        minPhi = cms.double(-3.1416),
        minPt = cms.double(0.1),
        minPu = cms.double(-0.5),
        minTracks = cms.double(0),
        minVertcount = cms.double(-0.5),
        minVertpos = cms.double(0.01),
        minZpos = cms.double(-30),
        mindr = cms.double(0.001),
        mindrj = cms.double(0.001),
        nintChi2 = cms.int32(40),
        nintDeDx = cms.int32(40),
        nintDxy = cms.int32(100),
        nintDz = cms.int32(60),
        nintDzpvCumulative = cms.int32(240),
        nintDzpvsigCumulative = cms.int32(200),
        nintEta = cms.int32(60),
        nintHit = cms.int32(81),
        nintLayers = cms.int32(26),
        nintMVA = cms.int32(100),
        nintPVz = cms.int32(120),
        nintPhi = cms.int32(36),
        nintPt = cms.int32(40),
        nintPu = cms.int32(130),
        nintTracks = cms.int32(200),
        nintVertcount = cms.int32(161),
        nintVertpos = cms.int32(40),
        nintZpos = cms.int32(60),
        nintdr = cms.int32(100),
        nintdrj = cms.int32(100),
        phiRes_nbin = cms.int32(300),
        phiRes_rangeMax = cms.double(0.01),
        phiRes_rangeMin = cms.double(-0.01),
        ptRes_nbin = cms.int32(100),
        ptRes_rangeMax = cms.double(0.1),
        ptRes_rangeMin = cms.double(-0.1),
        seedingLayerSets = cms.vstring(
            'BPix1+BPix2+BPix3+BPix4',
            'BPix1+BPix2+BPix3+FPix1_pos',
            'BPix1+BPix2+BPix3+FPix1_neg',
            'BPix1+BPix2+FPix1_pos+FPix2_pos',
            'BPix1+BPix2+FPix1_neg+FPix2_neg',
            'BPix1+FPix1_pos+FPix2_pos+FPix3_pos',
            'BPix1+FPix1_neg+FPix2_neg+FPix3_neg',
            'BPix1+BPix2+BPix3',
            'BPix2+BPix3+BPix4',
            'BPix1+BPix3+BPix4',
            'BPix1+BPix2+BPix4',
            'BPix2+BPix3+FPix1_pos',
            'BPix2+BPix3+FPix1_neg',
            'BPix1+BPix2+FPix1_pos',
            'BPix1+BPix2+FPix1_neg',
            'BPix1+BPix3+FPix1_pos',
            'BPix1+BPix3+FPix1_neg',
            'BPix2+FPix1_pos+FPix2_pos',
            'BPix2+FPix1_neg+FPix2_neg',
            'BPix1+FPix1_pos+FPix2_pos',
            'BPix1+FPix1_neg+FPix2_neg',
            'BPix1+BPix2+FPix2_pos',
            'BPix1+BPix2+FPix2_neg',
            'FPix1_pos+FPix2_pos+FPix3_pos',
            'FPix1_neg+FPix2_neg+FPix3_neg',
            'BPix1+FPix2_pos+FPix3_pos',
            'BPix1+FPix2_neg+FPix3_neg',
            'BPix1+FPix1_pos+FPix3_pos',
            'BPix1+FPix1_neg+FPix3_neg',
            'BPix1+BPix2',
            'BPix1+BPix3',
            'BPix2+BPix3',
            'BPix1+FPix1_pos',
            'BPix1+FPix1_neg',
            'BPix2+FPix1_pos',
            'BPix2+FPix1_neg',
            'BPix1+BPix4',
            'BPix2+BPix4',
            'BPix3+BPix4',
            'BPix1+FPix2_pos',
            'BPix1+FPix2_neg',
            'BPix1+FPix3_pos',
            'BPix1+FPix3_neg',
            'BPix2+FPix2_pos',
            'BPix2+FPix2_neg',
            'BPix3+FPix1_pos',
            'BPix3+FPix1_neg',
            'FPix1_pos+FPix2_pos',
            'FPix1_neg+FPix2_neg',
            'FPix1_pos+FPix3_pos',
            'FPix1_neg+FPix3_neg',
            'FPix2_pos+FPix3_pos',
            'FPix2_neg+FPix3_neg',
            'BPix3+BPix4+TIB1',
            'TIB1+TIB2+MTIB3',
            'TIB1+TIB2+MTIB4',
            'TIB1+TIB2+MTID1_pos',
            'TIB1+TIB2+MTID1_neg',
            'TID1_pos+TID2_pos+TID3_pos',
            'TID1_neg+TID2_neg+TID3_neg',
            'TID1_pos+TID2_pos+MTID3_pos',
            'TID1_neg+TID2_neg+MTID3_neg',
            'TID1_pos+TID2_pos+MTEC1_pos',
            'TID1_neg+TID2_neg+MTEC1_neg',
            'TID2_pos+TID3_pos+TEC1_pos',
            'TID2_neg+TID3_neg+TEC1_neg',
            'TID2_pos+TID3_pos+MTEC1_pos',
            'TID2_neg+TID3_neg+MTEC1_neg',
            'TEC1_pos+TEC2_pos+TEC3_pos',
            'TEC1_neg+TEC2_neg+TEC3_neg',
            'TEC1_pos+TEC2_pos+MTEC3_pos',
            'TEC1_neg+TEC2_neg+MTEC3_neg',
            'TEC1_pos+TEC2_pos+TEC4_pos',
            'TEC1_neg+TEC2_neg+TEC4_neg',
            'TEC1_pos+TEC2_pos+MTEC4_pos',
            'TEC1_neg+TEC2_neg+MTEC4_neg',
            'TEC2_pos+TEC3_pos+TEC4_pos',
            'TEC2_neg+TEC3_neg+TEC4_neg',
            'TEC2_pos+TEC3_pos+MTEC4_pos',
            'TEC2_neg+TEC3_neg+MTEC4_neg',
            'TEC2_pos+TEC3_pos+TEC5_pos',
            'TEC2_neg+TEC3_neg+TEC5_neg',
            'TEC2_pos+TEC3_pos+TEC6_pos',
            'TEC2_neg+TEC3_neg+TEC6_neg',
            'TEC3_pos+TEC4_pos+TEC5_pos',
            'TEC3_neg+TEC4_neg+TEC5_neg',
            'TEC3_pos+TEC4_pos+MTEC5_pos',
            'TEC3_neg+TEC4_neg+MTEC5_neg',
            'TEC3_pos+TEC5_pos+TEC6_pos',
            'TEC3_neg+TEC5_neg+TEC6_neg',
            'TEC4_pos+TEC5_pos+TEC6_pos',
            'TEC4_neg+TEC5_neg+TEC6_neg',
            'TOB1+TEC1_pos',
            'TOB1+TEC1_neg',
            'TEC1_pos+TEC2_pos',
            'TEC1_neg+TEC2_neg',
            'TEC2_pos+TEC3_pos',
            'TEC2_neg+TEC3_neg',
            'TEC3_pos+TEC4_pos',
            'TEC3_neg+TEC4_neg',
            'TEC4_pos+TEC5_pos',
            'TEC4_neg+TEC5_neg',
            'TEC5_pos+TEC6_pos',
            'TEC5_neg+TEC6_neg',
            'TEC6_pos+TEC7_pos',
            'TEC6_neg+TEC7_neg',
            'TOB1+TOB2+MTOB3',
            'TOB1+TOB2+MTOB4',
            'TOB1+TOB2+MTEC1_pos',
            'TOB1+TOB2+MTEC1_neg',
            'BPix4+TIB1',
            'BPix4+TIB2'
        ),
        useFabsEta = cms.bool(False),
        useInvPt = cms.bool(False),
        useLogPt = cms.untracked.bool(True),
        useLogVertpos = cms.untracked.bool(True)
    ),
    ignoremissingtrackcollection = cms.untracked.bool(False),
    intimeOnlyTP = cms.bool(True),
    invertRapidityCutTP = cms.bool(False),
    label = cms.VInputTag(
        "hiConformalPixelTracks"
    ),
    label_pileupinfo = cms.InputTag("addPileupInfo"),
    label_tp_effic = cms.InputTag("mix","MergedTrackTruth"),
    label_tp_effic_refvector = cms.bool(False),
    label_tp_fake = cms.InputTag("mix","MergedTrackTruth"),
    label_tp_fake_refvector = cms.bool(False),
    label_tp_nlayers = cms.InputTag("trackingParticleNumberOfLayersProducer","trackerLayers"),
    label_tp_npixellayers = cms.InputTag("trackingParticleNumberOfLayersProducer","pixelLayers"),
    label_tp_nstripstereolayers = cms.InputTag("trackingParticleNumberOfLayersProducer","stripStereoLayers"),
    label_tv = cms.InputTag("mix","MergedTrackTruth"),
    label_vertex = cms.untracked.InputTag("pixelVertices"),
    lipTP = cms.double(30.0),
    maxPhi = cms.double(3.2),
    maxRapidityTP = cms.double(3),
    minHitTP = cms.int32(0),
    minPhi = cms.double(-3.2),
    minRapidityTP = cms.double(-3),
    mvaLabels = cms.untracked.PSet(

    ),
    parametersDefiner = cms.string('LhcParametersDefinerForTP'),
    pdgIdTP = cms.vint32(),
    ptMaxTP = cms.double(1e+100),
    ptMinTP = cms.double(0.005),
    signalOnlyTP = cms.bool(False),
    sim = cms.VInputTag(
        cms.InputTag("g4SimHits","TrackerHitsPixelBarrelLowTof"), cms.InputTag("g4SimHits","TrackerHitsPixelBarrelHighTof"), cms.InputTag("g4SimHits","TrackerHitsPixelEndcapLowTof"), cms.InputTag("g4SimHits","TrackerHitsPixelEndcapHighTof"), cms.InputTag("g4SimHits","TrackerHitsTIBLowTof"),
        cms.InputTag("g4SimHits","TrackerHitsTIBHighTof"), cms.InputTag("g4SimHits","TrackerHitsTIDLowTof"), cms.InputTag("g4SimHits","TrackerHitsTIDHighTof"), cms.InputTag("g4SimHits","TrackerHitsTOBLowTof"), cms.InputTag("g4SimHits","TrackerHitsTOBHighTof"),
        cms.InputTag("g4SimHits","TrackerHitsTECLowTof"), cms.InputTag("g4SimHits","TrackerHitsTECHighTof")
    ),
    simHitTpMapTag = cms.InputTag("simHitTPAssocProducer"),
    simPVMaxZ = cms.untracked.double(-1),
    stableOnlyTP = cms.bool(False),
    tipTP = cms.double(60),
    trackCollectionForDrCalculation = cms.InputTag("hiConformalPixelTracks"),
    useGsf = cms.bool(False),
    useLogPt = cms.untracked.bool(True),
    vertexAssociator = cms.untracked.InputTag("VertexAssociatorByPositionAndTracksHIon")
)

VertexAssociatorByPositionAndTracksHIon = cms.EDProducer("VertexAssociatorByPositionAndTracksProducer",
    absT = cms.double(-1),
    absZ = cms.double(0.1),
    maxRecoT = cms.double(-1),
    maxRecoZ = cms.double(1000),
    mightGet = cms.optional.untracked.vstring,
    sharedTrackFraction = cms.double(-1),
    sigmaT = cms.double(-1),
    sigmaZ = cms.double(3),
    trackAssociation = cms.InputTag("trackingParticlePixelTrackAsssociationHIon")
)

trackingParticlePixelTrackAsssociationHIon = cms.EDProducer("TrackAssociatorEDProducer",
    associator = cms.InputTag("quickTrackAssociatorByHitsHIon"),
    ignoremissingtrackcollection = cms.untracked.bool(False),
    label_tp = cms.InputTag("mix","MergedTrackTruth"),
    label_tr = cms.InputTag("hiConformalPixelTracks")
)

quickTrackAssociatorByHitsHIon = cms.EDProducer("QuickTrackAssociatorByHitsProducer",
    AbsoluteNumberOfHits = cms.bool(False),
    Cut_RecoToSim = cms.double(0.75),
    PixelHitWeight = cms.double(1.0),
    Purity_SimToReco = cms.double(0.75),
    Quality_SimToReco = cms.double(0.5),
    SimToRecoDenominator = cms.string('reco'),
    ThreeHitTracksAreSpecial = cms.bool(True),
    cluster2TPSrc = cms.InputTag("tpClusterProducerHIon"),
    useClusterTPAssociation = cms.bool(True)
)

tpClusterProducerHIon = cms.EDProducer("ClusterTPAssociationProducer",
    mightGet = cms.optional.untracked.vstring,
    phase2OTClusterSrc = cms.InputTag("siPhase2Clusters"),
    phase2OTSimLinkSrc = cms.InputTag("simSiPixelDigis","Tracker"),
    pixelClusterSrc = cms.InputTag("siPixelClustersPreSplitting"),
    pixelSimLinkSrc = cms.InputTag("simSiPixelDigis"),
    simTrackSrc = cms.InputTag("g4SimHits"),
    stripClusterSrc = cms.InputTag("siStripClusters"),
    stripSimLinkSrc = cms.InputTag("simSiStripDigis"),
    throwOnMissingCollections = cms.bool(True),
    trackingParticleSrc = cms.InputTag("mix","MergedTrackTruth")
)
